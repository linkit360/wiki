### Cheese 

### Конфигурация nginx

* ```/``` --> ```http://127.0.0.1:50300``` 
* ```/lp``` -->  ```http://127.0.0.1:50300$uri/$is_args$args;```  -- когда отображаем кампанию, она должна обязательно иметь слеш в конце, чтобы диспатчер корректно отдавал статику. Если слеш на конце есть, то запрос до css, например, идет такой ```http://platform.th.linkit360.ru/lp/cpm.ak0/assets/css/main.css```. А запрос до отобажения кампании ```http://platform.th.linkit360.ru/lp/cpm.ak0/```. Это можно было бы решить, отдавая index.html внутри кампании и таким образом отдавать страницу, в которой прописаны относительные пути до статики. Но мы добавляем в index.html шаблонизацию от golang для добавления переменных (отображения iframe, проброса автоклика и др.) и от этого автоматически нужно, чтобы index.html назывался уникальным образом, чтобы не перезатирать другие кампании - ограничение от библиотеки html/template. Кроме того, корневой файл кампании парсится на старте диспатчера (для ускорения времени обработки и чтобы сразу дать обратную связь по обновлению кампании). 

* ```/api``` --> ```http://127.0.0.1:50306/api``` -- проброс до 


### Описание, как должно работать 

#### MO Pixel Buffer 
* curl -L "http://platform.th.linkit360.ru/lp/cheese_1?msisdn=928777777777&aff_sub=5432104769mb85528554322"
* * check pixel added in xmp_pixel_buffer

http://platform.th.linkit360.ru/lp/cheese_1?aff_sub=5432104769mb85528554322

### Scheme 
{{undefined:cheese.png}}

### System

* DB: linkit_cheese:linkit-prod.ceta2yrq1zco.ap-southeast-1.rds.amazonaws.com
* RabbitMQ: localhost

### Ports

* http: 50306


### Metrics

* http://localhost:50306/metrics

### Locations 

* /metrics
* /api/mo/ais        
* /api/mo/dtac       
* /api/mo/trueh      

### Queues 

#### out

* cheese_mo
* transaction_log
* pixels

### Tables
No tables


### Backlog

* RPS: take from database, not from config
* msisdn prefix take from inmem
