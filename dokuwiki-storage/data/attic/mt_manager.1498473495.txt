### Задачи сервиса

Это воркер, который занимается основной бизнес логикой. 

В очередях ходят задачи (подписки). 

* mt manager решает задачи, например, создать "новые подписки" и обработать "ответы от операторов" по подписке. 
* mt manager создает задачи для других сервисов - сделай в АПИ оператора "запросы на тарификацию" и "отправка СМС" к АПИ оператора, "запиши в базу изменения" для подписок, когда не так важна скорость появления в базе изменений, - в qlistener. 
* mt manager напрямую ходит в базу, чтобы проставить статус подписке (pending для запросов на тарификацию) или создать новую подписку, а также, чтобы получить список записей для обработки ("список всех periodic, которые нужно сегодня протарифицировать).
* mt manager перед тем, как обработать задачу (то есть подписчика, подписку) делает проверки - номер из черного списка? (blacklisted), номер с пост оплатой? (postpaid), номер уже подписан на эту подписку? (rejected).  


* Добавляет/ создает новые подписки в базу - из очередей от API операторов и из диспатчера
* Хранит кэш этих новых подписок, чтобы потом делать проверки при добавлении новых, - например, кто из них уже был подписан; Еще если оператор шлет без доп. данных уведомления о подписках, то из кэша берутся данные по номеру телефона или id транзации оператора
* Добавлять запрос на отправку контента в СМС для API оператора
* Добавлять запросы на плановую тарификацию для АПИ оператора
* Добавлять запросы на тарификацию абонентов, которые не заплатили в прошлый раз

Можно было бы разделить создание новых подписок и обработку старых запросов, но это удобнее с точки зрения реализации - иметь кэш новых подписок в одном сервисе, чтобы каждый раз не ходить в базу. 





### Ports

* http 50305


### Metrics

*  http://localhost:50305/metrics

### Locations 

* /metrics

### Queues 

#### In

* [operator_name]_mo_tarifficate
* [operator_name]_responses
* [operator_name]_sms_responses

#### Out

* [operator_name]_requests
* [operator_name]_sms_requests
* pixels

### Tables

* subscriptions 
* retries
* transactions
* msisdn_blacklist
* msisdn_postpaid
* services
* operators


### Scripts

* dev/retries.go 

get retries from json file and put them into database (when start retries failed)